#!/usr/bin/env python3

import sys
import collections

class Node:
	def __init__(self, label, data = None, child = []):
		self.label = label
		self.data = data
		self.child = child

	def __str__(self):
		return ','.join([self.label, self.data, self.child[0].label])

def newick(tree):
	return tree

def ischild(nodes, c):
	for n in nodes:
		if [a.label == c.label for a in n.child].count(True)>0:
			return True

	return False

def root(nodes):
	for n in nodes:
		if not ischild(nodes, n):
			return n

	return None

def cutoff(root, branches):
	left = []
	for b in branches:
		if b[0] in root[1].keys():
			root[1][b[0]] = b[1]
		else:
			if b[0] != root[0]:
				left.append(b)
	
	return root, left

def tree(root, branches):
	if len(branches):
		root, left = cutoff(root, branches)

		for child in root[1]:
			root[1][child] = tree([child,root[1][child]], left)[1]

	return root 

parent = None
branches = []
for line in sys.stdin:
	p,n,d = line.strip().split('\t')

	if p != parent:
		if parent != None:
			branches.append(branch)

		parent = p
		branch = Node(label = p)
		#branch = [p, {}]

	branch.data = d
	branch.child.append(Node(label = n))
	#branch[1][n] = {}

branches.append(branch)

root = root(branches)
#print(root)
#print( tree(root, branches))
print(*branches, sep='\n')
